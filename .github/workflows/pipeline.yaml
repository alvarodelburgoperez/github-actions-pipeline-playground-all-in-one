name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VERSION: '1.5.0'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build
        run: |
          npm install
          npm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: website-dist
          path: dist/

  infrastructure:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      website_bucket: ${{ steps.terraform-outputs.outputs.website_bucket }}
      artifacts_bucket: ${{ steps.terraform-outputs.outputs.artifacts_bucket }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./iac
        run: terraform init

      - name: Terraform Plan
        working-directory: ./iac
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./iac
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        working-directory: ./iac
        id: terraform-outputs
        shell: bash
        run: |
          # Guardar los valores en archivos temporales
          terraform output -raw website_bucket_name > website_bucket.txt
          terraform output -raw artifacts_bucket_name > artifacts_bucket.txt
          
          # Verificación de variables
          echo "Website bucket name: $(cat website_bucket.txt)"
          echo "Artifacts bucket name: $(cat artifacts_bucket.txt)"
          
          # Leer los archivos y establecer los outputs
          echo "website_bucket=$(cat website_bucket.txt)" >> "$GITHUB_OUTPUT"
          echo "artifacts_bucket=$(cat artifacts_bucket.txt)" >> "$GITHUB_OUTPUT"
          
          # Eliminar los archivos temporales
          rm website_bucket.txt artifacts_bucket.txt
          
          # Verificación de outputs
          echo "Website bucket: ${{ steps.terraform-outputs.outputs.website_bucket }}"
          echo "Artifacts bucket: ${{ steps.terraform-outputs.outputs.artifacts_bucket }}"
          
          cat $GITHUB_OUTPUT

  deploy:
    needs: infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: website-dist
          path: dist

      - name: Deploy site to S3
        env:
          WEBSITE_BUCKET: ${{ needs.infrastructure.outputs.website_bucket }}
        shell: bash
        run: |
          
          # Verificación de los outputs
          echo "Website bucket: ${{ steps.terraform-outputs.outputs.website_bucket }}"
          
          # Verificación de las variables de entorno
          echo "Website bucket: $WEBSITE_BUCKET"
         
          # Desplegar sitio web
          aws s3 sync dist/ "s3://$WEBSITE_BUCKET/"

      - name: Copy zip to S3
        env:
          ARTIFACTS_BUCKET: ${{ needs.infrastructure.outputs.artifacts_bucket }}
        shell: bash
        run: |
          
          # Verificación de los outputs
          echo "Artifacts bucket: ${{ steps.terraform-outputs.outputs.artifacts_bucket }}"
          
          # Verificación de las variables de entorno
          echo "Artifacts bucket: $ARTIFACTS_BUCKET"
          
          cd dist && zip -r ../website-dist.zip .
          cd ..
          ls -la website-dist.zip
          
          # Copiar artefacto
          aws s3 cp website-dist.zip "s3://${ARTIFACTS_BUCKET}/website-dist.zip"

  release:
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Tag
        run: |
          # Crear tag con timestamp
          TAG="release-$(date +'%Y%m%d-%H%M%S')"
          git tag $TAG
          git push origin $TAG
